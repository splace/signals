package signals

import (
	"fmt"
	"strings"
)

func ExampleSquare() {
	s := Square{unitX}
	for t := x(0); t < 2*unitX; t += unitX / 10 {
		fmt.Println(s.call(t),strings.Repeat(" ",int(s.call(t)/(maxY/33))+33)+"X")
	}
	fmt.Println()
	 /* Output: 
   100.00%                                                                   X
   100.00%                                                                   X
   100.00%                                                                   X
   100.00%                                                                   X
   100.00%                                                                   X
  -100.00% X
  -100.00% X
  -100.00% X
  -100.00% X
  -100.00% X
   100.00%                                                                   X
   100.00%                                                                   X
   100.00%                                                                   X
   100.00%                                                                   X
   100.00%                                                                   X
  -100.00% X
  -100.00% X
  -100.00% X
  -100.00% X
  -100.00% X
  */
}

func ExamplePulse() {
	s := Pulse{unitX}
	for t := x(0); t < 2*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	// Output:   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%
}
func ExampleRampUpDown() {
	s := RampUp{unitX}
	for t := x(0); t < 2*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	s2 := RampDown{unitX}
	for t := x(0); t < 2*unitX; t += unitX / 10 {
		fmt.Print(s2.call(t))
	}
	fmt.Println()
	// Output:   0.00%    10.00%    20.00%    30.00%    40.00%    50.00%    60.00%    70.00%    80.00%    90.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%
	//    100.00%    90.00%    80.00%    70.00%    60.00%    50.00%    40.00%    30.00%    20.00%    10.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%
}

func ExampleSine() {
	s := Sine{unitX}
	for t := x(0); t < 2*unitX; t += unitX / 16 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	// Output:     0.00%    38.27%    70.71%    92.39%   100.00%    92.39%    70.71%    38.27%     0.00%   -38.27%   -70.71%   -92.39%  -100.00%   -92.39%   -70.71%   -38.27%    -0.00%    38.27%    70.71%    92.39%   100.00%    92.39%    70.71%    38.27%     0.00%   -38.27%   -70.71%   -92.39%  -100.00%   -92.39%   -70.71%   -38.27%
}

func ExampleNewTone() {
	s := NewTone(unitX, 0)
	for t := x(0); t < 2*unitX; t += unitX / 16 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	// Output:     0.00%    38.27%    70.71%    92.39%   100.00%    92.39%    70.71%    38.27%     0.00%   -38.27%   -70.71%   -92.39%  -100.00%   -92.39%   -70.71%   -38.27%    -0.00%    38.27%    70.71%    92.39%   100.00%    92.39%    70.71%    38.27%     0.00%   -38.27%   -70.71%   -92.39%  -100.00%   -92.39%   -70.71%   -38.27%
}

func ExampleSigmoid() {
	s := Sigmoid{unitX}
	for t := x(-2 * unitX); t < 2*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	// Output:   11.92%    13.01%    14.19%    15.45%    16.80%    18.24%    19.78%    21.42%    23.15%    24.97%    26.89%    28.91%    31.00%    33.18%    35.43%    37.75%    40.13%    42.56%    45.02%    47.50%    50.00%    52.50%    54.98%    57.44%    59.87%    62.25%    64.57%    66.82%    69.00%    71.09%    73.11%    75.03%    76.85%    78.58%    80.22%    81.76%    83.20%    84.55%    85.81%    86.99%
}

func ExampleReflected() {
	s := Reflected{NewADSREnvelope(unitX, unitX, unitX, maxY/2, unitX)}
	for t := x(0); t < 5*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	// Output:   100.00%    90.00%    80.00%    70.00%    60.00%    50.00%    40.00%    30.00%    20.00%    10.00%     0.00%     5.00%    10.00%    15.00%    20.00%    25.00%    30.00%    35.00%    40.00%    45.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    55.00%    60.00%    65.00%    70.00%    75.00%    80.00%    85.00%    90.00%    95.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%   100.00%
}

func ExampleMultiplex() {
	s := Multiplex{Sine{unitX * 5}, Sine{unitX * 10}}
	for t := x(0); t < 5*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	// Output:     0.00%     0.79%     3.12%     6.90%    11.98%    18.16%    25.20%    32.81%    40.68%    48.48%    55.90%    62.61%    68.32%    72.75%    75.69%    76.94%    76.40%    73.99%    69.72%    63.65%    55.90%    46.66%    36.16%    24.67%    12.51%     0.00%   -12.51%   -24.67%   -36.16%   -46.66%   -55.90%   -63.65%   -69.72%   -73.99%   -76.40%   -76.94%   -75.69%   -72.75%   -68.32%   -62.61%   -55.90%   -48.48%   -40.68%   -32.81%   -25.20%   -18.16%   -11.98%    -6.90%    -3.12%    -0.79%
}

func ExampleStack() {
	s := Stack{Sine{unitX * 5}, Sine{unitX * 10}}
	for t := x(0); t < 5*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println() // Output:     0.00%     9.41%    18.70%    27.78%    36.52%    44.84%    52.63%    59.81%    66.30%    72.03%    76.94%    80.99%    84.13%    86.35%    87.64%    88.00%    87.46%    86.03%    83.77%    80.72%    76.94%    72.52%    67.52%    62.04%    56.17%    50.00%    43.63%    37.17%    30.71%    24.34%    18.16%    12.26%     6.72%     1.60%    -3.02%    -7.10%   -10.59%   -13.45%   -15.67%   -17.24%   -18.16%   -18.45%   -18.13%   -17.24%   -15.82%   -13.94%   -11.65%    -9.04%    -6.17%    -3.13%
}

func ExampleTriggered() {
	s := Triggered{NewADSREnvelope(unitX, unitX, unitX, maxY/2, unitX), maxY / 3 * 2, true, unitX / 100, unitX * 10, 0, nil, 0, false}
	for t := x(0); t < 5*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	fmt.Println(s.Shift)
	//s.Trigger = Maxy / 3
	s.Rising = false
	for t := x(0); t < 5*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println()
	fmt.Println(s.Shift)
	fmt.Println()
	// Output:    67.00%    77.00%    87.00%    97.00%    96.50%    91.50%    86.50%    81.50%    76.50%    71.50%    66.50%    61.50%    56.50%    51.50%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    46.50%    41.50%    36.50%    31.50%    26.50%    21.50%    16.50%    11.50%     6.50%     1.50%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%
	//      0.67
	//     66.50%    61.50%    56.50%    51.50%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    50.00%    46.50%    41.50%    36.50%    31.50%    26.50%    21.50%    16.50%    11.50%     6.50%     1.50%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%     0.00%
	//      1.67
}


func ExampleSegmented() {
	s := NewSegmented(Sine{unitX * 10},unitX)
	for t := x(0); t < 5*unitX; t += unitX / 10 {
		fmt.Println(s.call(t),strings.Repeat(" ",int(s.call(t)/(maxY/33))+33)+"X")
	}
	fmt.Println()
	 /* Output: 
	 0.00%                                  X
     5.88%                                   X
    11.76%                                     X
    17.63%                                       X
    23.51%                                         X
    29.39%                                           X
    35.27%                                             X
    41.14%                                               X
    47.02%                                                 X
    52.90%                                                   X
    58.78%                                                     X
    62.41%                                                      X
    66.04%                                                       X
    69.68%                                                        X
    73.31%                                                          X
    76.94%                                                           X
    80.57%                                                            X
    84.21%                                                             X
    87.84%                                                              X
    91.47%                                                                X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    95.11%                                                                 X
    91.47%                                                                X
    87.84%                                                              X
    84.21%                                                             X
    80.57%                                                            X
    76.94%                                                           X
    73.31%                                                          X
    69.68%                                                        X
    66.04%                                                       X
    62.41%                                                      X
    58.78%                                                     X
    52.90%                                                   X
    47.02%                                                 X
    41.14%                                               X
    35.27%                                             X
    29.39%                                           X
    23.51%                                         X
    17.63%                                       X
    11.76%                                     X
     5.88%                                   X
	*/

}


func ExampleModulated() {
	s := Modulated{Sine{unitX * 5}, Sine{unitX * 10},unitX}
	for t := x(0); t < 5*unitX; t += unitX / 10 {
		fmt.Print(s.call(t))
	}
	fmt.Println() // Output:     0.00%    20.31%    39.75%    57.49%    72.78%    85.03%    93.79%    98.78%    99.92%    97.29%    91.13%    81.82%    69.86%    55.80%    40.23%    23.77%     6.99%    -9.57%   -25.46%   -40.26%   -53.69%   -65.52%   -75.61%   -83.90%   -90.38%   -95.11%   -98.18%   -99.74%   -99.92%   -98.89%   -96.83%   -93.88%   -90.22%   -85.99%   -81.32%   -76.32%   -71.11%   -65.76%   -60.34%   -54.91%   -49.51%   -44.18%   -38.93%   -33.78%   -28.73%   -23.77%   -18.90%   -14.10%    -9.37%    -4.67%
}



