package signals

import (
	"encoding/gob"
	"io"
)
func init() {
	gob.Register(Sum{})
}

// Sum is a Signal generated by adding together Signal(s).
// Sum is also a Periodical, taking its period, if any, from its first member.
// like OR logic, all sources have to be zero (at a particular momemt) for Sum to be zero.
type Sum []Signal

func (c Sum) Level(t interval) (total level) {
	for _, s := range c {
		total += s.Level(t)
	}
	return
}

func (c Sum) Period() (period interval) {
	if len(c) > 0 {
		if s, ok := c[0].(Periodical); ok {
			return s.Period()
		}
	}
	return
}

func (c Sum) Save(p io.Writer) error {
	return gob.NewEncoder(p).Encode(&c)
}

func (c *Sum) Load(p io.Reader) error {
	return gob.NewDecoder(p).Decode(c)
}

